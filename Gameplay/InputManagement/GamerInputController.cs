using System;
using UltimateFootballSystem.Gameplay.Common;
using UnityEngine;
using UnityEngine.InputSystem;

namespace UltimateFootballSystem.Gameplay.InputManagement
{
    public class GamerInputController
    {
        private readonly MainInputActions _inputAction; // Input actions C# class generated by Input System
        private InputDevice _assignedDevice; // The specific device assigned to this gamer

        private readonly UIInputHandler _uiHandler;
        private readonly GameplayInputHandler _gameplayHandler;
        private readonly SideSelectionInputHandler _sideHandler;

        // Public accessors for handlers
        public SideSelectionInputHandler SideSelectionHandler => _sideHandler;
        public GameplayInputHandler GameplayHandler => _gameplayHandler;
        public UIInputHandler UIHandler => _uiHandler;
        public InputDevice AssignedDevice => _assignedDevice;

        public  GamerInputController() {
            _inputAction = new MainInputActions();

            _uiHandler = new UIInputHandler(_inputAction.UI);
            _gameplayHandler = new GameplayInputHandler(_inputAction.Gameplay);
            _sideHandler = new SideSelectionInputHandler(_inputAction.SideSelection);

            // Subscribe to game state changes
            GameStateManager.Instance.OnGameStateChange += SetInputHandlerStateByGameState;
        }

        public void SetState(GameState state)
        {
            SetInputHandlerStateByGameState(state);
        }

        public void SetAssignedDevice(InputDevice device)
        {
            _assignedDevice = device;

            if (device != null)
            {
                BindInputActionsToDevice();
            }
            else
            {
                ClearDeviceBinding();
            }
        }

        private void BindInputActionsToDevice()
        {
            if (_assignedDevice == null)
            {
                Debug.LogWarning("[GamerInputController] Cannot bind input actions - no device assigned");
                return;
            }

            // Set the device restriction for all action maps
            _inputAction.devices = new InputDevice[] { _assignedDevice };

            Debug.Log($"[GamerInputController] Input actions bound to device: {_assignedDevice.displayName}");
        }

        private void ClearDeviceBinding()
        {
            // Clear device restrictions (will listen to all devices again)
            _inputAction.devices = null;

            Debug.Log("[GamerInputController] Device binding cleared - input actions disabled");
        }

        private void SetInputHandlerStateByGameState(GameState state)
        {
            _inputAction.Disable();
            switch (state) {
                case GameState.Default:
                    _inputAction.UI.Enable();
                    break;
                case GameState.MainMenu:
                    _inputAction.UI.Enable();
                    break;
                case GameState.SideSelection:
                    _inputAction.SideSelection.Enable();
                    break;
                case GameState.TacticsManagement:
                    _inputAction.TacticsManagement.Enable();
                    break;
                case GameState.InGame:
                    _inputAction.Gameplay.Enable();
                    break;
                case GameState.InGamePaused:
                    _inputAction.UI.Enable();
                    break;
                default:
                    throw new ArgumentOutOfRangeException(nameof(state), state, null);
            }
        }

        public void Cleanup()
        {
            _inputAction?.Disable();
            _sideHandler?.Cleanup();
        }
    }
}